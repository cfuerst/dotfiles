#git util functions

#detect if there is a git directory
function is_git() {
    git branch >/dev/null 2>/dev/null && return 0
    return 1
}

#colorsetup
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}●%{$reset_color%}"
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"
GIT_PROMPT_CLEAN="%{$fg[green]%}✓%{$reset_color%}"

#get git branch or tag
function get_git_branch_name() {
    echo "$GIT_PROMPT_PREFIX$(git rev-parse --abbrev-ref HEAD)$GIT_PROMPT_SUFFIX"
}

#parse status symbols
function get_git_state() {
    local GIT_STATE=""
    local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_AHEAD" -gt 0 ]; then
        GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
    fi
    local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_BEHIND" -gt 0 ]; then
        GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
    fi
    local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
    if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
        GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
    fi
    if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
        GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
    fi
    if ! git diff --quiet 2> /dev/null; then
        GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
    fi
    if ! git diff --cached --quiet 2> /dev/null; then
        GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
    fi
    if [[ -n $GIT_STATE ]]; then
        echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
    else
        echo "$GIT_PROMPT_PREFIX$GIT_PROMPT_CLEAN$GIT_PROMPT_SUFFIX"
    fi
}

#get a fake git revision number
function get_git_rev_nr(){
    echo "$GIT_PROMPT_PREFIX$(git rev-list HEAD | wc -l)$GIT_PROMPT_SUFFIX"
}

#get the main project name
function get_git_projectname(){
    bname=$(git remote -v | head -n1 | awk '{print $2}' | sed 's/.*\///' | sed 's/\.git//')
    echo "$GIT_PROMPT_PREFIX${bname}$GIT_PROMPT_SUFFIX"
}

#status for prompt
function get_git_status() {
    echo "$(get_git_state)$(get_git_projectname)$(get_git_branch_name)$(get_git_rev_nr)"
}